@page "/CreateAlert"
@using System.Reactive.Disposables
@using Microsoft.AspNetCore.Components
@using SSMB.Blazor.Pages.CreateAlert.Models
@using SSMB.Blazor.Utility
@inject IUriHelper UriHelper
@inject ICreateAlertViewModel ViewModel

<h1>Create Alert for @(ViewModel.ItemDetail?.Item?.Name ?? "")</h1>
<table class="create-alert">
    <thead>
        <tr>
            <th></th>
            <th>Field</th>
            <th>Is</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var condition in ViewModel.Conditions)
        {
            <tr>
                <td>
                    <button onclick="@(() => { ViewModel.RemoveCondition(ViewModel.Conditions.IndexOf(condition)); })">X</button>
                </td>
                <td>
                    <select bind="@condition.AlertField">
                        @foreach (var alertType in Enum.GetValues(typeof(AlertField)).Cast<AlertField>())
                        {
                            <option value="@alertType">@alertType.ToDescription()</option>
                        }
                    </select>
                </td>
                <td>
                    <select bind="@condition.AlertOperator">
                        @foreach (var alertOperator in Enum.GetValues(typeof(AlertOperator)).Cast<AlertOperator>())
                        {
                            <option value="@alertOperator">@alertOperator.ToDescription()</option>
                        }
                    </select>
                </td>
                <td>
                    <input type="text" placeholder="Value" bind="@condition.Value" />
                </td>
            </tr>
        }
    </tbody>
</table>
<button onclick="@ViewModel.AddConditionClicked">Add Condition</button>
<button onclick="@ViewModel.AddAlertClicked">Add Alert</button>

@functions {
    private int Id { get; set; }

    private CompositeDisposable subscriptions;

    protected override void OnInit()
    {
        RefreshType();
        subscriptions = new CompositeDisposable();
        UriHelper.OnLocationChanged += OnLocationChanges;
        subscriptions.Add(this.ViewModel.WhenItemDetailsUpdated.Subscribe(_ => Invoke(StateHasChanged)));
    }

    private void OnLocationChanges(object sender, string location) => RefreshType();

    private void RefreshType()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());
        var idStr = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var idParam) ? idParam.First() : "";
        if (!int.TryParse(idStr, out var id))
        {
            return;
        }

        this.Id = id;
        ViewModel.ItemId = id;
        StateHasChanged();
    }

    public void Dispose()
    {
        UriHelper.OnLocationChanged -= OnLocationChanges;
        this.subscriptions.Dispose();
    }
}